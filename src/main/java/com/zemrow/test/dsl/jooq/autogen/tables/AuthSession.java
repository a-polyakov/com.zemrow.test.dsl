/*
 * This file is generated by jOOQ.
*/
package com.zemrow.test.dsl.jooq.autogen.tables;


import com.zemrow.test.dsl.jooq.autogen.Auth;
import com.zemrow.test.dsl.jooq.autogen.Keys;
import com.zemrow.test.dsl.jooq.autogen.tables.records.AuthSessionRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * Сессия пользователя
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AuthSession extends TableImpl<AuthSessionRecord> {

    private static final long serialVersionUID = -1340802992;

    /**
     * The reference instance of <code>auth.auth_session</code>
     */
    public static final AuthSession AUTH_SESSION = new AuthSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthSessionRecord> getRecordType() {
        return AuthSessionRecord.class;
    }

    /**
     * The column <code>auth.auth_session.id</code>. ID записи
     */
    public final TableField<AuthSessionRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "ID записи");

    /**
     * The column <code>auth.auth_session.auth_entry_point_id</code>. Точка входа пользователя
     */
    public final TableField<AuthSessionRecord, UUID> AUTH_ENTRY_POINT_ID = createField("auth_entry_point_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Точка входа пользователя");

    /**
     * The column <code>auth.auth_session.token</code>. Уникальный идентификатор сессии, сложный для подбора
     */
    public final TableField<AuthSessionRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "Уникальный идентификатор сессии, сложный для подбора");

    /**
     * The column <code>auth.auth_session.create_time</code>. Дата создания записи
     */
    public final TableField<AuthSessionRecord, Long> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Дата создания записи");

    /**
     * The column <code>auth.auth_session.delete_time</code>. Дата удаления записи
     */
    public final TableField<AuthSessionRecord, Long> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.BIGINT, this, "Дата удаления записи");

    /**
     * The column <code>auth.auth_session.deleted_by</code>. Пользователь удаливший запись
     */
    public final TableField<AuthSessionRecord, UUID> DELETED_BY = createField("deleted_by", org.jooq.impl.SQLDataType.UUID, this, "Пользователь удаливший запись");

    /**
     * Create a <code>auth.auth_session</code> table reference
     */
    public AuthSession() {
        this("auth_session", null);
    }

    /**
     * Create an aliased <code>auth.auth_session</code> table reference
     */
    public AuthSession(String alias) {
        this(alias, AUTH_SESSION);
    }

    private AuthSession(String alias, Table<AuthSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthSession(String alias, Table<AuthSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Сессия пользователя");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Auth.AUTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthSessionRecord> getPrimaryKey() {
        return Keys.PK_AUTH_SESSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthSessionRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthSessionRecord>>asList(Keys.PK_AUTH_SESSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuthSessionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthSessionRecord, ?>>asList(Keys.AUTH_SESSION__AUTH_SESSION__AUTH_ENTRY_POINT_ID__FK, Keys.AUTH_SESSION__AUTH_SESSION__DELETED_BY__FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthSession as(String alias) {
        return new AuthSession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthSession rename(String name) {
        return new AuthSession(name, null);
    }
}
