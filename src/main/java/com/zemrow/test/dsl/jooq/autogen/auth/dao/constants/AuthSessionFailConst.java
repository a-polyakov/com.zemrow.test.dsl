/*
 * This file is generated by jOOQ.
*/
package com.zemrow.test.dsl.jooq.autogen.auth.dao.constants;


import com.zemrow.test.dsl.jooq.autogen.auth.SchemaAuthConst;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import java.util.UUID;


/**
 * Неудачные попытки войти в систему
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AuthSessionFailConst extends TableImpl<Record> {

    private static final long serialVersionUID = 1941369417;

    /**
     * The reference instance of <code>auth.auth_session_fail</code>
     */
    public static final AuthSessionFailConst AUTH_SESSION_FAIL = new AuthSessionFailConst();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>auth.auth_session_fail.id</code>. ID записи
     */
    public final TableField<Record, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "ID записи");

    /**
     * The column <code>auth.auth_session_fail.auth_entry_point_id</code>. Точка входа пользователя
     */
    public final TableField<Record, UUID> AUTH_ENTRY_POINT_ID = createField("auth_entry_point_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Точка входа пользователя");

    /**
     * The column <code>auth.auth_session_fail.ip_address</code>. IP адрес клиента
     */
    public final TableField<Record, String> IP_ADDRESS = createField("ip_address", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "IP адрес клиента");

    /**
     * The column <code>auth.auth_session_fail.comment</code>. Сообщение об ошибке
     */
    public final TableField<Record, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "Сообщение об ошибке");

    /**
     * The column <code>auth.auth_session_fail.create_time</code>. Дата создания записи
     */
    public final TableField<Record, Long> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Дата создания записи");

    /**
     * Create a <code>auth.auth_session_fail</code> table reference
     */
    public AuthSessionFailConst() {
        this("auth_session_fail", null);
    }

    /**
     * Create an aliased <code>auth.auth_session_fail</code> table reference
     */
    public AuthSessionFailConst(String alias) {
        this(alias, AUTH_SESSION_FAIL);
    }

    private AuthSessionFailConst(String alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private AuthSessionFailConst(String alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Неудачные попытки войти в систему");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SchemaAuthConst.AUTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthSessionFailConst as(String alias) {
        return new AuthSessionFailConst(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthSessionFailConst rename(String name) {
        return new AuthSessionFailConst(name, null);
    }
}
