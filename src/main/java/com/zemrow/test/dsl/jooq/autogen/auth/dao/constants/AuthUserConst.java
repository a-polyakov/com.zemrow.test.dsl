/*
 * This file is generated by jOOQ.
*/
package com.zemrow.test.dsl.jooq.autogen.auth.dao.constants;


import com.zemrow.test.dsl.jooq.autogen.auth.SchemaAuthConst;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import java.util.UUID;


/**
 * Пользователь
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AuthUserConst extends TableImpl<Record> {

    private static final long serialVersionUID = -2042731221;

    /**
     * The reference instance of <code>auth.auth_user</code>
     */
    public static final AuthUserConst AUTH_USER = new AuthUserConst();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>auth.auth_user.id</code>. ID записи
     */
    public final TableField<Record, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "ID записи");

    /**
     * The column <code>auth.auth_user.label</code>. Состояние пользователя: Не в сети, В сети, Не беспокоить
     */
    public final TableField<Record, String> LABEL = createField("label", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "Состояние пользователя: Не в сети, В сети, Не беспокоить");

    /**
     * The column <code>auth.auth_user.create_time</code>. Дата создания записи
     */
    public final TableField<Record, Long> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Дата создания записи");

    /**
     * The column <code>auth.auth_user.created_by</code>. Пользователь создавший запись
     */
    public final TableField<Record, UUID> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Пользователь создавший запись");

    /**
     * The column <code>auth.auth_user.update_time</code>. Дата обновления записи
     */
    public final TableField<Record, Long> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Дата обновления записи");

    /**
     * The column <code>auth.auth_user.updated_by</code>. Пользователь обновивший запись
     */
    public final TableField<Record, UUID> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Пользователь обновивший запись");

    /**
     * The column <code>auth.auth_user.delete_time</code>. Дата удаления записи
     */
    public final TableField<Record, Long> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.BIGINT, this, "Дата удаления записи");

    /**
     * The column <code>auth.auth_user.deleted_by</code>. Пользователь удаливший запись
     */
    public final TableField<Record, UUID> DELETED_BY = createField("deleted_by", org.jooq.impl.SQLDataType.UUID, this, "Пользователь удаливший запись");

    /**
     * Create a <code>auth.auth_user</code> table reference
     */
    public AuthUserConst() {
        this("auth_user", null);
    }

    /**
     * Create an aliased <code>auth.auth_user</code> table reference
     */
    public AuthUserConst(String alias) {
        this(alias, AUTH_USER);
    }

    private AuthUserConst(String alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private AuthUserConst(String alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Пользователь");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SchemaAuthConst.AUTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthUserConst as(String alias) {
        return new AuthUserConst(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthUserConst rename(String name) {
        return new AuthUserConst(name, null);
    }
}
