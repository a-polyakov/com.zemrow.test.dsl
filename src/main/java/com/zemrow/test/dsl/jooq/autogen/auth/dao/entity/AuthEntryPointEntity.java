/*
 * This file is generated by jOOQ.
*/
package com.zemrow.test.dsl.jooq.autogen.auth.dao.entity;


import java.io.Serializable;
import java.util.UUID;


/**
 * Способы авторизации пользователя
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AuthEntryPointEntity implements Serializable {

    private static final long serialVersionUID = -1304872949;

    private UUID id;
    private UUID authUserId;
    private String entryPointType;
    private String clientId;
    private String credential;
    private Boolean validate;
    private Long createTime;
    private UUID createdBy;
    private Long updateTime;
    private UUID updatedBy;
    private Long deleteTime;
    private UUID deletedBy;

    public AuthEntryPointEntity() {
    }

    public AuthEntryPointEntity(AuthEntryPointEntity value) {
        this.id = value.id;
        this.authUserId = value.authUserId;
        this.entryPointType = value.entryPointType;
        this.clientId = value.clientId;
        this.credential = value.credential;
        this.validate = value.validate;
        this.createTime = value.createTime;
        this.createdBy = value.createdBy;
        this.updateTime = value.updateTime;
        this.updatedBy = value.updatedBy;
        this.deleteTime = value.deleteTime;
        this.deletedBy = value.deletedBy;
    }

    public AuthEntryPointEntity(
            UUID id,
            UUID authUserId,
            String entryPointType,
            String clientId,
            String credential,
            Boolean validate,
            Long createTime,
            UUID createdBy,
            Long updateTime,
            UUID updatedBy,
            Long deleteTime,
            UUID deletedBy
    ) {
        this.id = id;
        this.authUserId = authUserId;
        this.entryPointType = entryPointType;
        this.clientId = clientId;
        this.credential = credential;
        this.validate = validate;
        this.createTime = createTime;
        this.createdBy = createdBy;
        this.updateTime = updateTime;
        this.updatedBy = updatedBy;
        this.deleteTime = deleteTime;
        this.deletedBy = deletedBy;
    }

    public UUID getId() {
        return this.id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public UUID getAuthUserId() {
        return this.authUserId;
    }

    public void setAuthUserId(UUID authUserId) {
        this.authUserId = authUserId;
    }

    public String getEntryPointType() {
        return this.entryPointType;
    }

    public void setEntryPointType(String entryPointType) {
        this.entryPointType = entryPointType;
    }

    public String getClientId() {
        return this.clientId;
    }

    public void setClientId(String clientId) {
        this.clientId = clientId;
    }

    public String getCredential() {
        return this.credential;
    }

    public void setCredential(String credential) {
        this.credential = credential;
    }

    public Boolean getValidate() {
        return this.validate;
    }

    public void setValidate(Boolean validate) {
        this.validate = validate;
    }

    public Long getCreateTime() {
        return this.createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public UUID getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(UUID createdBy) {
        this.createdBy = createdBy;
    }

    public Long getUpdateTime() {
        return this.updateTime;
    }

    public void setUpdateTime(Long updateTime) {
        this.updateTime = updateTime;
    }

    public UUID getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(UUID updatedBy) {
        this.updatedBy = updatedBy;
    }

    public Long getDeleteTime() {
        return this.deleteTime;
    }

    public void setDeleteTime(Long deleteTime) {
        this.deleteTime = deleteTime;
    }

    public UUID getDeletedBy() {
        return this.deletedBy;
    }

    public void setDeletedBy(UUID deletedBy) {
        this.deletedBy = deletedBy;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final AuthEntryPointEntity other = (AuthEntryPointEntity) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (authUserId == null) {
            if (other.authUserId != null)
                return false;
        } else if (!authUserId.equals(other.authUserId))
            return false;
        if (entryPointType == null) {
            if (other.entryPointType != null)
                return false;
        } else if (!entryPointType.equals(other.entryPointType))
            return false;
        if (clientId == null) {
            if (other.clientId != null)
                return false;
        } else if (!clientId.equals(other.clientId))
            return false;
        if (credential == null) {
            if (other.credential != null)
                return false;
        } else if (!credential.equals(other.credential))
            return false;
        if (validate == null) {
            if (other.validate != null)
                return false;
        } else if (!validate.equals(other.validate))
            return false;
        if (createTime == null) {
            if (other.createTime != null)
                return false;
        } else if (!createTime.equals(other.createTime))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        } else if (!createdBy.equals(other.createdBy))
            return false;
        if (updateTime == null) {
            if (other.updateTime != null)
                return false;
        } else if (!updateTime.equals(other.updateTime))
            return false;
        if (updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        } else if (!updatedBy.equals(other.updatedBy))
            return false;
        if (deleteTime == null) {
            if (other.deleteTime != null)
                return false;
        } else if (!deleteTime.equals(other.deleteTime))
            return false;
        if (deletedBy == null) {
            if (other.deletedBy != null)
                return false;
        } else if (!deletedBy.equals(other.deletedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((authUserId == null) ? 0 : authUserId.hashCode());
        result = prime * result + ((entryPointType == null) ? 0 : entryPointType.hashCode());
        result = prime * result + ((clientId == null) ? 0 : clientId.hashCode());
        result = prime * result + ((credential == null) ? 0 : credential.hashCode());
        result = prime * result + ((validate == null) ? 0 : validate.hashCode());
        result = prime * result + ((createTime == null) ? 0 : createTime.hashCode());
        result = prime * result + ((createdBy == null) ? 0 : createdBy.hashCode());
        result = prime * result + ((updateTime == null) ? 0 : updateTime.hashCode());
        result = prime * result + ((updatedBy == null) ? 0 : updatedBy.hashCode());
        result = prime * result + ((deleteTime == null) ? 0 : deleteTime.hashCode());
        result = prime * result + ((deletedBy == null) ? 0 : deletedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AuthEntryPointEntity (");

        sb.append(id);
        sb.append(", ").append(authUserId);
        sb.append(", ").append(entryPointType);
        sb.append(", ").append(clientId);
        sb.append(", ").append(credential);
        sb.append(", ").append(validate);
        sb.append(", ").append(createTime);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updateTime);
        sb.append(", ").append(updatedBy);
        sb.append(", ").append(deleteTime);
        sb.append(", ").append(deletedBy);

        sb.append(")");
        return sb.toString();
    }
}
