/*
 * This file is generated by jOOQ.
*/
package com.zemrow.test.dsl.jooq.autogen.auth.dao.entity;


import com.zemrow.test.dsl.jooq.impl.AbstractEntity;

import java.io.Serializable;
import java.util.UUID;


/**
 * Сессия пользователя
 */
public class AuthSessionEntity extends AbstractEntity implements Serializable {

    private static final long serialVersionUID = -1960148670;

    /**
     * Точка входа пользователя
     */
    private UUID authEntryPointId;
    /**
     * Уникальный идентификатор сессии, сложный для подбора
     */
    private String token;
    /**
     * Дата создания записи
     */
    private Long createTime;
    /**
     * Дата удаления записи
     */
    private Long deleteTime;
    /**
     * Пользователь удаливший запись
     */
    private UUID deletedBy;

    public AuthSessionEntity() {
    }

    public AuthSessionEntity(AuthSessionEntity value) {
        super(value);
        this.authEntryPointId = value.authEntryPointId;
        this.token = value.token;
        this.createTime = value.createTime;
        this.deleteTime = value.deleteTime;
        this.deletedBy = value.deletedBy;
    }

    public AuthSessionEntity(
            UUID id,
            UUID authEntryPointId,
            String token,
            Long createTime,
            Long deleteTime,
            UUID deletedBy
    ) {
        super(id);
        this.authEntryPointId = authEntryPointId;
        this.token = token;
        this.createTime = createTime;
        this.deleteTime = deleteTime;
        this.deletedBy = deletedBy;
    }

    public UUID getAuthEntryPointId() {
        return this.authEntryPointId;
    }

    public void setAuthEntryPointId(UUID authEntryPointId) {
        this.authEntryPointId = authEntryPointId;
    }

    public String getToken() {
        return this.token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public Long getCreateTime() {
        return this.createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public Long getDeleteTime() {
        return this.deleteTime;
    }

    public void setDeleteTime(Long deleteTime) {
        this.deleteTime = deleteTime;
    }

    public UUID getDeletedBy() {
        return this.deletedBy;
    }

    public void setDeletedBy(UUID deletedBy) {
        this.deletedBy = deletedBy;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("AuthSessionEntity (");

        sb.append("id:").append(id);
        sb.append(", authEntryPointId:").append(authEntryPointId);
        sb.append(", token:").append(token);
        sb.append(", createTime:").append(createTime);
        sb.append(", deleteTime:").append(deleteTime);
        sb.append(", deletedBy:").append(deletedBy);

        sb.append(")");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (!super.equals(obj)) {
            return false;
        }
        if (!(obj instanceof AuthSessionEntity)) {
            return false;
        }
        final AuthSessionEntity other = (AuthSessionEntity) obj;
        if (authEntryPointId == null) {
            if (other.authEntryPointId != null) {
                return false;
            }
        } else if (!authEntryPointId.equals(other.authEntryPointId)) {
            return false;
        }
        if (token == null) {
            if (other.token != null) {
                return false;
            }
        } else if (!token.equals(other.token)) {
            return false;
        }
        if (createTime == null) {
            if (other.createTime != null) {
                return false;
            }
        } else if (!createTime.equals(other.createTime)) {
            return false;
        }
        if (deleteTime == null) {
            if (other.deleteTime != null) {
                return false;
            }
        } else if (!deleteTime.equals(other.deleteTime)) {
            return false;
        }
        if (deletedBy == null) {
            if (other.deletedBy != null) {
                return false;
            }
        } else if (!deletedBy.equals(other.deletedBy)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + ((authEntryPointId == null) ? 0 : authEntryPointId.hashCode());
        result = 31 * result + ((token == null) ? 0 : token.hashCode());
        result = 31 * result + ((createTime == null) ? 0 : createTime.hashCode());
        result = 31 * result + ((deleteTime == null) ? 0 : deleteTime.hashCode());
        result = 31 * result + ((deletedBy == null) ? 0 : deletedBy.hashCode());
        return result;
    }
}
