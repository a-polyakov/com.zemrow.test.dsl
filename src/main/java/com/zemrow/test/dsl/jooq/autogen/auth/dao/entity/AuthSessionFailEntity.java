/*
 * This file is generated by jOOQ.
*/
package com.zemrow.test.dsl.jooq.autogen.auth.dao.entity;


import com.zemrow.test.dsl.jooq.impl.AbstractEntity;

import java.io.Serializable;
import java.util.UUID;


/**
 * Неудачные попытки войти в систему
 */
public class AuthSessionFailEntity extends AbstractEntity implements Serializable {

    private static final long serialVersionUID = 411392380;

    /**
     * Точка входа пользователя
     */
    private UUID authEntryPointId;
    /**
     * IP адрес клиента
     */
    private String ipAddress;
    /**
     * Сообщение об ошибке
     */
    private String comment;
    /**
     * Дата создания записи
     */
    private Long createTime;

    public AuthSessionFailEntity() {
    }

    public AuthSessionFailEntity(AuthSessionFailEntity value) {
        super(value);
        this.authEntryPointId = value.authEntryPointId;
        this.ipAddress = value.ipAddress;
        this.comment = value.comment;
        this.createTime = value.createTime;
    }

    public AuthSessionFailEntity(
            UUID id,
            UUID authEntryPointId,
            String ipAddress,
            String comment,
            Long createTime
    ) {
        super(id);
        this.authEntryPointId = authEntryPointId;
        this.ipAddress = ipAddress;
        this.comment = comment;
        this.createTime = createTime;
    }

    public UUID getAuthEntryPointId() {
        return this.authEntryPointId;
    }

    public void setAuthEntryPointId(UUID authEntryPointId) {
        this.authEntryPointId = authEntryPointId;
    }

    public String getIpAddress() {
        return this.ipAddress;
    }

    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }

    public String getComment() {
        return this.comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public Long getCreateTime() {
        return this.createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("AuthSessionFailEntity (");

        sb.append("id:").append(id);
        sb.append(", authEntryPointId:").append(authEntryPointId);
        sb.append(", ipAddress:").append(ipAddress);
        sb.append(", comment:").append(comment);
        sb.append(", createTime:").append(createTime);

        sb.append(")");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (!super.equals(obj)) {
            return false;
        }
        if (!(obj instanceof AuthSessionFailEntity)) {
            return false;
        }
        final AuthSessionFailEntity other = (AuthSessionFailEntity) obj;
        if (authEntryPointId == null) {
            if (other.authEntryPointId != null) {
                return false;
            }
        } else if (!authEntryPointId.equals(other.authEntryPointId)) {
            return false;
        }
        if (ipAddress == null) {
            if (other.ipAddress != null) {
                return false;
            }
        } else if (!ipAddress.equals(other.ipAddress)) {
            return false;
        }
        if (comment == null) {
            if (other.comment != null) {
                return false;
            }
        } else if (!comment.equals(other.comment)) {
            return false;
        }
        if (createTime == null) {
            if (other.createTime != null) {
                return false;
            }
        } else if (!createTime.equals(other.createTime)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + ((authEntryPointId == null) ? 0 : authEntryPointId.hashCode());
        result = 31 * result + ((ipAddress == null) ? 0 : ipAddress.hashCode());
        result = 31 * result + ((comment == null) ? 0 : comment.hashCode());
        result = 31 * result + ((createTime == null) ? 0 : createTime.hashCode());
        return result;
    }
}
