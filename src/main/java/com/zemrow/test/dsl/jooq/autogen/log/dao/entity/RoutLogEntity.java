/*
 * This file is generated by jOOQ.
*/
package com.zemrow.test.dsl.jooq.autogen.log.dao.entity;


import com.zemrow.test.dsl.jooq.impl.AbstractEntity;

import java.io.Serializable;
import java.util.UUID;


/**
 * Логи вызовов сервисов
 */
public class RoutLogEntity extends AbstractEntity implements Serializable {

    private static final long serialVersionUID = -1803295032;

    /**
     * Уникальный идентификатор сессии пользователя
     */
    private String token;
    /**
     * Идентификатор сервиса
     */
    private String serviceId;
    /**
     * Имя метода
     */
    private String action;
    /**
     * Время запуска
     */
    private Long startInvoke;
    /**
     * Время окончания
     */
    private Long endInvoke;
    /**
     * Ошибка если была (stacktrace)
     */
    private String errorStackTrace;

    public RoutLogEntity() {
    }

    public RoutLogEntity(RoutLogEntity value) {
        super(value);
        this.token = value.token;
        this.serviceId = value.serviceId;
        this.action = value.action;
        this.startInvoke = value.startInvoke;
        this.endInvoke = value.endInvoke;
        this.errorStackTrace = value.errorStackTrace;
    }

    public RoutLogEntity(
            UUID id,
            String token,
            String serviceId,
            String action,
            Long startInvoke,
            Long endInvoke,
            String errorStackTrace
    ) {
        super(id);
        this.token = token;
        this.serviceId = serviceId;
        this.action = action;
        this.startInvoke = startInvoke;
        this.endInvoke = endInvoke;
        this.errorStackTrace = errorStackTrace;
    }

    public String getToken() {
        return this.token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public String getServiceId() {
        return this.serviceId;
    }

    public void setServiceId(String serviceId) {
        this.serviceId = serviceId;
    }

    public String getAction() {
        return this.action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public Long getStartInvoke() {
        return this.startInvoke;
    }

    public void setStartInvoke(Long startInvoke) {
        this.startInvoke = startInvoke;
    }

    public Long getEndInvoke() {
        return this.endInvoke;
    }

    public void setEndInvoke(Long endInvoke) {
        this.endInvoke = endInvoke;
    }

    public String getErrorStackTrace() {
        return this.errorStackTrace;
    }

    public void setErrorStackTrace(String errorStackTrace) {
        this.errorStackTrace = errorStackTrace;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("RoutLogEntity (");

        sb.append("id:").append(id);
        sb.append(", token:").append(token);
        sb.append(", serviceId:").append(serviceId);
        sb.append(", action:").append(action);
        sb.append(", startInvoke:").append(startInvoke);
        sb.append(", endInvoke:").append(endInvoke);
        sb.append(", errorStackTrace:").append(errorStackTrace);

        sb.append(")");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (!super.equals(obj)) {
            return false;
        }
        if (!(obj instanceof RoutLogEntity)) {
            return false;
        }
        final RoutLogEntity other = (RoutLogEntity) obj;
        if (token == null) {
            if (other.token != null) {
                return false;
            }
        } else if (!token.equals(other.token)) {
            return false;
        }
        if (serviceId == null) {
            if (other.serviceId != null) {
                return false;
            }
        } else if (!serviceId.equals(other.serviceId)) {
            return false;
        }
        if (action == null) {
            if (other.action != null) {
                return false;
            }
        } else if (!action.equals(other.action)) {
            return false;
        }
        if (startInvoke == null) {
            if (other.startInvoke != null) {
                return false;
            }
        } else if (!startInvoke.equals(other.startInvoke)) {
            return false;
        }
        if (endInvoke == null) {
            if (other.endInvoke != null) {
                return false;
            }
        } else if (!endInvoke.equals(other.endInvoke)) {
            return false;
        }
        if (errorStackTrace == null) {
            if (other.errorStackTrace != null) {
                return false;
            }
        } else if (!errorStackTrace.equals(other.errorStackTrace)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + ((token == null) ? 0 : token.hashCode());
        result = 31 * result + ((serviceId == null) ? 0 : serviceId.hashCode());
        result = 31 * result + ((action == null) ? 0 : action.hashCode());
        result = 31 * result + ((startInvoke == null) ? 0 : startInvoke.hashCode());
        result = 31 * result + ((endInvoke == null) ? 0 : endInvoke.hashCode());
        result = 31 * result + ((errorStackTrace == null) ? 0 : errorStackTrace.hashCode());
        return result;
    }
}
